{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\admin\\controller\\install.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "..\\..\\..\\src\\admin\\controller\\install.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport child_process from 'child_process'\n\nexport default class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     */\n    indexAction(appType) {\n\n        return this.display();\n    }\n\n    /**\n     * guacamole action\n     * @return {json}\n     */\n    guacamoleAction() {\n        return this.guacamole();\n    }\n\n    /**\n     * tomcat action\n     * @return {json}\n     */\n    tomcatAction() {\n        return this.tomcat();\n    }\n\n    guacamole() {\n        let cmd = 'sh', options = ['guacamole.sh'];\n        let result = this.cli(cmd, options);\n\n        return result;\n    }\n\n    tomcat() {\n        let cmd = 'sh', options = ['tomcat.sh'];\n        let result = this.cli(cmd, options);\n\n        return result;\n    }\n\n    mysql() {\n        let cmd = 'sh', options = ['mysql.sh'];\n        let result = this.cli(cmd, options);\n\n        return result;\n    }\n\n    /*\n     * @param {string} command �����ؼ���\n     * @param {array} option ��������\n     * @return {json}\n     */\n    async cli(command, option) {\n        const {spawn} = child_process;\n\n        let cmd = process.platform === \"win322\" ? command + \".cmd\" : command;\n        let cli = spawn(cmd, option);\n\n        cli.stdout.setEncoding('UTF-8');\n        cli.stdout.on('data', (data) => {\n            return this.success(data);\n        });\n\n        cli.stderr.setEncoding('UTF-8');\n        cli.stderr.on('data', (data) => {\n            return this.error(6001, data);\n        });\n\n        cli.on('close', () => {\n\n        });\n    }\n\n    /*\n     * socket\n     */\n    openAction(self) {\n        const {socket} = self.http;\n\n        this.broadcast(\"dCloud\", \"connected\");\n    }\n\n    launcherAction(self) {\n        const {socket,data} = self.http;\n        const {spawn} = child_process;\n        const cwd = think.ROOT_PATH + '/bin';\n\n        let cmd = 'sh', options = [data.cmd + '.sh'];\n\n        let cli = spawn(cmd, options, {cwd: cwd});\n\n        cli.stdout.setEncoding('UTF-8');\n        cli.stdout.on('data', (data) => {\n            this.emit('launcher', data);\n        });\n\n        cli.stderr.setEncoding('UTF-8');\n        cli.stderr.on('data', (data) => {\n            this.emit('launcher', data);\n        });\n\n        cli.on('close', () => {\n            this.emit('launcher', 'complete dCloud');\n        });\n    }\n\n    closeAction(self) {\n        this.broadcast(\"dCloud\", \"disconnected\");\n    }\n}"
    ]
}