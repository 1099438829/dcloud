{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\admin\\controller\\server.js"
    ],
    "names": [],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;qBAOI,W,0BAAc;AACV,YAAI,SAAS,KAAK,KAAL,CAAW,QAAX,EAAqB,MAArB,EAAb;AACA,aAAK,MAAL,CAAY,QAAZ,EAAsB,MAAtB;;AAEA,eAAO,KAAK,OAAL,EAAP;AACH,K;;;;;;;;qBAMD,S,wBAAY;;AAER,YAAG,KAAK,MAAL,EAAH,EAAkB;AACd,gBAAM,QAAQ,KAAK,IAAL,EAAd;;AAEA,kBAAM,WAAN,GAAoB,MAAM,IAAN,EAApB;AACA,iBAAK,KAAL,CAAW,QAAX,EAAqB,GAArB,CAAyB,KAAzB;;AAEA,iBAAK,QAAL,CAAc,qBAAd;AACH;;AAED,eAAO,KAAK,OAAL,EAAP;AACH,K;;qBAED,U,yBAAa;AACT,YAAM,OAAO,KAAK,GAAL,EAAb;;AAEA,YAAG,KAAK,MAAL,EAAH,EAAkB;AACd,gBAAM,QAAQ,KAAK,IAAL,EAAd;;AAEA,gBAAI,CAAC,MAAM,OAAN,CAAc,KAAK,EAAnB,CAAL,EAA6B;AACzB,qBAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,MAAjC,CAAwC,KAAxC;AACH;;AAED,iBAAK,QAAL,CAAc,qBAAd;AACH;;AAED,YAAM,aAAa,KAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,IAAjC,EAAnB;;AAEA,aAAK,MAAL,CAAY,QAAZ,EAAsB,UAAtB;;AAEA,eAAO,KAAK,OAAL,EAAP;AACH,K;;;;;;;;qBAMD,S,wBAAY;AACR,YAAI,OAAO,KAAK,GAAL,EAAX;;AAEA,YAAI,SAAS,KAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,MAAjC,EAAb;;AAEA,aAAK,MAAL,CAAY,QAAZ,EAAsB,OAAtB;AACH,K;;qBAEK,e;;gBACI,I,EACF,M,EAEA,I,EAMA,G,EAEA,U;;;;;;AAXE,gC,GAAO,KAAK,GAAL,E;;mCACM,KAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,IAAjC,E;;;AAAf,kC;AAEA,gC,GAAO;AACP,sCAAM,OAAO,IADN;AAEP,oCAAI,OAAO,EAFJ;AAGP,sCAAM,OAAO;AAHN,6B;AAMP,+B,GAAM,YAAY,KAAK,EAAjB,GAAsB,GAAtB,GAA4B,KAAK,IAAjC,GAAwC,c;;mCAE3B,KAAK,UAAL,CAAgB,GAAhB,EAAqB,KAArB,CAA2B,UAAC,CAAD,EAAM;AACpD,uCAAO,CAAP;AACH,6BAFsB,C;;;AAAnB,sC;;kCAIA,WAAW,UAAX,IAAyB,G;;;;;AACzB,iCAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,MAAjC,CAAwC,EAAC,QAAQ,CAAT,EAAxC;6DACO,KAAK,OAAL,CAAa,IAAb,EAAmB,KAAK,MAAL,CAAY,eAAZ,CAAnB,C;;;AAEP,iCAAK,KAAL,CAAW,QAAX,EAAqB,KAArB,CAA2B,IAA3B,EAAiC,MAAjC,CAAwC,EAAC,QAAQ,CAAT,EAAxC;6DACO,KAAK,KAAL,CAAW,IAAX,EAAiB,KAAK,MAAL,CAAY,eAAZ,CAAjB,EAA+C,IAA/C,C;;;;;;;;;;;;;;;;;qBAIf,U,uBAAW,G,EAAK;AACZ,YAAI,KAAK,MAAM,SAAN,CAAgB,kBAAQ,GAAxB,CAAT;AACA,eAAO,GAAG;AACN,iBAAK;AADC,SAAH,CAAP;AAGH,K",
    "file": "..\\..\\..\\src\\admin\\controller\\server.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport request from 'request';\n\nexport default class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     */\n    indexAction() {\n        let server = this.model('server').select();\n        this.assign('server', server);\n\n        return this.display();\n    }\n\n    /**\n     * add action\n     * @return {Promise} []\n     */\n    addAction() {\n\n        if(this.isPost()) {\n            const _post = this.post();\n\n            _post.accessToken = think.uuid();\n            this.model('server').add(_post);\n\n            this.redirect('/admin/server/index');\n        }\n\n        return this.display();\n    }\n\n    editAction() {\n        const _get = this.get();\n\n        if(this.isPost()) {\n            const _post = this.post();\n\n            if (!think.isEmpty(_get.id)) {\n                this.model('server').where(_get).update(_post);\n            }\n\n            this.redirect('/admin/server/index');\n        }\n\n        const serverData = this.model('server').where(_get).find();\n\n        this.assign('server', serverData);\n\n        return this.display();\n    }\n\n    /*\n     * del action\n     *\n     * */\n    delAction() {\n        let data = this.get();\n\n        let result = this.model('server').where(data).delete();\n\n        this.action('server', 'index');\n    }\n\n    async runstatusAction() {\n        const _get = this.get();\n        let server = await this.model('server').where(_get).find();\n\n        let json = {\n            name: server.name,\n            ip: server.ip,\n            port: server.port\n        };\n\n        let url = 'http://' + json.ip + ':' + json.port + '/setuser.asp';\n\n        let resultData = await this.getApiData(url).catch((e)=> {\n            return e\n        });\n\n        if (resultData.statusCode == 200) {\n            this.model('server').where(_get).update({status: 1});\n            return this.success(json, this.locale('query_success'));\n        } else {\n            this.model('server').where(_get).update({status: 0});\n            return this.error(5000, this.locale('query_success'), json);\n        }\n    }\n\n    getApiData(url) {\n        let fn = think.promisify(request.get);\n        return fn({\n            url: url\n        });\n    }\n}"
    ]
}