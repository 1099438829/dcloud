{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\proxy.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "..\\..\\..\\src\\home\\controller\\proxy.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport child_process from 'child_process';\nimport net from 'net';\nimport http from 'http';\nimport url from 'url';\nimport fs from 'fs';\nimport request from 'request';\n\nvar proxyServer = false;\nexport default class extends think.controller.base {\n\n    indexAction() {\n\n        this.success();\n    }\n\n\n    /**\n     * 远程部署[ 所有 ]记录启动应用命令\n     *\n     * @return {Promise} []\n     */\n    async remotegeneratecmdAction() {\n        const {remoteProgramUrl} = this.config('api');\n        const programData = await this.model('program').getList();\n        let result = [];\n\n        for (let key in programData) {\n            const {id,path,serverIp,serverProbePath} = programData[key];\n\n            let options = {\n                domain: 'http://' + this.http.host,\n                appid: id,\n                appPath: path\n            };\n\n            let remotePath = serverProbePath + '/app/' + id + '.bat';\n            let formData = {cmd: this.getShellContent(options), path: remotePath};\n            let url = remoteProgramUrl.replace('${ip}', serverIp);\n\n            let _result = await this.getApiData(url, formData).catch((e)=> {\n                think.log(e, 'WARNING');\n                return e;\n            });\n\n\n            if (_result.code == 'ENOTFOUND') {\n                _result.id = programData[key].id;\n                result.push(_result);\n            } else {\n                result.push({\n                    code: 200,\n                    errno: 0,\n                    hostname: _result.request.hostname,\n                    host: _result.request.host,\n                    port: _result.request.port,\n                    id: programData[key].id\n                });\n            }\n\n        }\n\n\n        this.success(result, this.locale('query_success'));\n    }\n\n    /**\n     * 远程部署[ 单条 ]记录启动应用命令\n     *\n     * @return {Promise} []\n     */\n    async remotegeneratecmdsingleAction() {\n        const _get = this.get();\n\n        const {remoteProgramUrl} = this.config('api');\n        const programData = await this.model('program').getSingleList({'program.id':_get.id});\n\n        const {id,path,serverIp,serverProbePath} = programData;\n\n        let result = [];\n        let remotePath = serverProbePath + '/app/' + id + '.bat';\n        let options = {\n            domain: 'http://' + this.http.host,\n            appid: id,\n            appPath: path\n        };\n        let formData = {cmd: this.getShellContent(options), path: remotePath};\n        let url = remoteProgramUrl.replace('${ip}', serverIp);\n\n        let _result = await this.getApiData(url, formData).catch((e)=> {\n            think.log(e, 'WARNING');\n            return e;\n        });\n\n\n        if (_result.code == 'ENOTFOUND') {\n            _result.id = programData[key].id;\n            result.push(_result);\n        } else {\n            result.push({\n                code: 200,\n                errno: 0,\n                hostname: _result.request.hostname,\n                host: _result.request.host,\n                port: _result.request.port,\n                id: id\n            });\n        }\n\n\n        this.success(result, this.locale('query_success'));\n    }\n\n\n\n    async regaddAction() {\n        let proxyUrl = 'http://dcloud.stbui.com';\n        let cmdStr = `reg add \"HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\" /v AutoConfigURL /d ${proxyUrl} /f >nul`;\n\n        let result = await this.exec(cmdStr).catch((e)=> {\n            return e\n        });\n\n        if (think.isEmpty(result)) result = cmdStr;\n\n\n        this.success(result, this.locale('query_success'));\n    }\n\n    async pacAction() {\n\n        if (proxyServer == false) {\n            this.pac(http);\n            proxyServer = true;\n        }\n\n\n        let pacContent = 'function FindProxyForURL(url, host){return \"PROXY 172.16.97.13:8362\";}';\n        this.json(pacContent);\n    }\n\n    getUserHosts(hostname) {\n\n        let hosts = [\n            {'192.168.159.137': 'dcloud.stbui.com'},\n            {'127.0.0.1': 'www.stbui.com'}\n        ];\n\n        let host = hostname;\n\n        for (let key in hosts) {\n            for (let k in hosts[key]) {\n                if (hosts[key][k] == hostname) {\n                    host = k\n                }\n            }\n\n        }\n\n        return host;\n\n    }\n\n    pac(http) {\n        let server = http.createServer().on('request', (req, res)=> {\n            let u = url.parse(req.url);\n\n\n            //let options = {\n            //    hostname: u.hostname,\n            //    port: u.port || 80,\n            //    path: u.path,\n            //    method: req.method,\n            //    headers: req.headers\n            //};\n\n            let options = {\n                hostname: this.getUserHosts(u.hostname),\n                port: u.port || 80,\n                path: u.path,\n                method: req.method,\n                headers: req.headers\n            };\n\n            let pReq = http.request(options, (pRes)=> {\n                res.writeHead(pRes.statusCode, pRes.headers);\n                pRes.pipe(res);\n            });\n\n            pReq.on('error', (e)=> {\n                res.end();\n            });\n\n            req.pipe(pReq);\n\n        });\n\n\n        server.listen(8362, '0.0.0.0');\n\n        return server;\n    }\n\n\n    tcpserverAction() {\n        let server = net.createServer(function (socket) {\n            console.log('server connection');\n\n            socket.write('server success');\n            //socket.pipe(socket);\n\n            socket.on('data', function (data) {\n                console.log('server print:', data.toString());\n            });\n\n        });\n\n        server.listen(8124, function () {\n            console.log('server listen');\n        });\n\n    }\n\n    tcpclientAction() {\n        let client = net.connect({port: 8124}, function () {\n            console.log('client connected');\n            client.write('client success');\n        });\n\n        client.on('data', function (data) {\n            console.log('data:', data.toString());\n            client.end();\n        });\n\n        client.on('end', function () {\n            console.log('client disconnection');\n        })\n    }\n\n\n    exec(cmd) {\n        const {exec} = child_process;\n\n        let fn = think.promisify(exec);\n\n        return fn(cmd);\n    }\n\n\n    getApiData(url, formData, method) {\n        let fn = think.promisify(request);\n        return fn({\n            method: method || 'POST',\n            url: url,\n            form: formData\n        });\n    }\n\n    getShellContent(options) {\n        let str = `\n@echo off\n\nset domain=${options.domain}\nset appid=${options.appid}\n\nrem 命令行参数\nset proxymode=\"%1\"\nset proxyurl=%2\nset url=%3\nset apiKey=%4\n\n\nrem 设置代理\nset proxypath=\"HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\"\nreg add %proxypath% /v \"ProxyEnable\" /t REG_DWORD /d 0 /f>nul\nset proxydef=\nif %proxyurl% equ \"\" set proxydef=1\nif %proxyurl% equ default set proxydef=1\nif %proxyurl% equ \"default\" set proxydef=1\nif defined proxydef set proxyurl=\"http://%domain%/proxy?name=%USERNAME%\"\nif %proxymode% equ \"noproxy\" (\n\tset proxyurl=\"\"\n)\nif %proxyurl% neq \"\" (\n\trem 开启代理\n\treg add %proxypath% /v \"AutoConfigURL\" /d %proxyurl% /f >nul\n) else (\n\trem 关闭代理\n\treg delete %proxypath% /v \"AutoConfigURL\" /f > nul\n)\n\nrem 打开应用\nstart /MAX \"\" \"${options.appPath}\" %url% %proxyParam%\n\n        `;\n\n        return str;\n    }\n}"
    ]
}