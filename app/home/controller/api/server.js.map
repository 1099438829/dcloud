{
    "version": 3,
    "sources": [
        "..\\..\\..\\..\\src\\home\\controller\\api\\server.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "..\\..\\..\\..\\src\\home\\controller\\api\\server.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from '../base.js';\nimport fs from 'fs';\nimport child_process from 'child_process';\n\nexport default class extends think.controller.base {\n\n    indexAction() {\n        return this.success(undefined, this.locale('query_success'));\n    }\n\n    /*\n     * 查询所有服务器列表\n     * @return {json}\n     * */\n    async gethostAction() {\n        const server = await this.model('server').select();\n\n        return this.success(server, this.locale('query_success'));\n    }\n\n    runstatusAction() {\n\n        return this.action('admin/server', 'runstatus');\n    }\n\n    restartAction() {\n        this.cli('server', ['tomcat', 'restart']);\n        this.cli('server', ['guacd', 'restart']);\n\n        return this.success(undefined, this.locale('query_success'));\n    }\n\n    startAction() {\n        this.cli('server', ['tomcat', 'start']);\n        this.cli('server', ['guacd', 'start']);\n\n        return this.success(undefined, this.locale('query_success'));\n    }\n\n    stopAction() {\n        this.cli('server', ['tomcat', 'stop']);\n        this.cli('server', ['guacd', 'stop']);\n\n        return this.success(undefined, this.locale('query_success'));\n    }\n\n    /*\n     * 生成 Guacamole 服务端配置文件\n     * @return {string} 返回配置文件数据\n     * */\n    async configAction() {\n        const _get = this.get();\n        const server = await this.model('server').select();\n        const config = await this.model('config').where({id: 1}).find();\n\n        let buffer;\n        let _configStr = '';\n\n        for (var i in server) {\n            _configStr += `\n    <config name=\"${server[i].accessToken}\" protocol=\"rdp\">\n        <param name=\"hostname\" value=\"${server[i].ip}\" />\n        <param name=\"port\" value=\"3389\" />\n        <param name=\"enable-drive\" value=\"true\" />\n        <param name=\"drive-path\" value=\"/home/guacdshare\" />\n    </config>`;\n        }\n\n        let configs = `<configs>\\r${_configStr}\\r</configs>`;\n\n        try {\n            if (_get.type == 'write') {\n                fs.writeFileSync(config.guacamoleConfig, configs, 'utf-8');\n            }\n\n            buffer = fs.readFileSync(config.guacamoleConfig, 'utf-8');\n\n            return this.success(buffer, this.locale('query_success'));\n        } catch (err) {\n            fs.writeFileSync(think.ROOT_PATH + '/bin/noauth-config.xml', configs, 'utf-8');\n            buffer = `配置文件写入失败，请手动修改 ${config.guacamoleConfig} 配置文件\\r\\n或者在项目根目录中的 bin/noauth-config.xml 配置文件覆盖\\r\\n\\r\\n${configs}`;\n\n            return this.json(buffer);\n        }\n\n    }\n\n\n    readconfigAction(path) {\n        if (think.isEmpty(path)) {\n            return this.error(1000);\n        }\n\n        let buffer = fs.readFileSync(path, 'utf-8');\n\n        this.json(buffer);\n    }\n\n\n    writeconfigAction(path) {\n        if (think.isEmpty(path)) {\n            return this.error(1000);\n        }\n\n        let buffer = fs.writeFileSync(path, 'utf-8');\n\n        this.json(buffer);\n    }\n\n\n    cliAction() {\n        const _get = this.get();\n\n        this.cli('server', [_get.server, _get.type]);\n\n        return this.success(null, this.locale('query_success'));\n\n    }\n\n\n    cli(command, option) {\n        const {spawn} = child_process;\n\n        let cmd = process.platform === \"win32\" ? \"service.cmd\" : \"service\";\n        let cli = spawn(cmd, option);\n\n        cli.stdout.setEncoding('UTF-8');\n        cli.stdout.on('data', (data) => {\n            return this.success(data);\n        });\n\n        cli.stderr.setEncoding('UTF-8');\n        cli.stderr.on('data', (data) => {\n            return this.error(6001, data);\n        });\n\n        cli.on('close', () => {\n\n        });\n    }\n\n\n    async addAction() {\n        // 后期考虑加入accessToken校验\n        const _post = this.post();\n\n        //服务器身份标识\n        _post.accessToken = think.uuid();\n        let serverData = await this.model('server').thenAdd(_post, {ip: _post.ip});\n\n        if (serverData.type == \"exist\") {\n            return this.fail(1001, '添加失败');\n        }\n\n        return this.success(undefined, '添加成功');\n    }\n}"
    ]
}